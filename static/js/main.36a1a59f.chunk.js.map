{"version":3,"sources":["index.tsx"],"names":["App","useState","text","setText","todos","setTodos","filter","setFilter","handleOnSubmit","e","preventDefault","newTodo","value","id","Date","getTime","checked","removed","filteredTodos","todo","defaultValue","onChange","target","onClick","handleOnEmpty","disabled","length","onSubmit","type","map","handleOnCheck","handleOnEdit","handleOnremoved","ReactDOM","render","document","getElementById"],"mappings":"6JAYMA,EAAiB,WAAO,IAAD,EACHC,mBAAS,IADN,mBACpBC,EADoB,KACdC,EADc,OAEDF,mBAAiB,IAFhB,mBAEpBG,EAFoB,KAEbC,EAFa,OAICJ,mBAAiB,OAJlB,mBAIpBK,EAJoB,KAIZC,EAJY,KAMrBC,EAAiB,SACrBC,GAIA,GAFAA,EAAEC,iBAEGR,EAAL,CAIA,IAAMS,EAAgB,CAEpBC,MAAOV,EACPW,IAAI,IAAIC,MAAOC,UACfC,SAAS,EACTC,SAAS,GAGXZ,EAAS,CAACM,GAAF,mBAAcP,KACtBD,EAAQ,MAmCJe,EAAgBd,EAAME,QAAO,SAACa,GAClC,OAAQb,GACN,IAAK,MACH,OAAQa,EAAKF,QACf,IAAK,UACH,OAAOE,EAAKH,UAAYG,EAAKF,QAC/B,IAAK,YACH,OAAQE,EAAKH,UAAYG,EAAKF,QAChC,IAAK,UACH,OAAOE,EAAKF,QACd,QACE,OAAOE,MAab,OACE,gCACE,yBACEC,aAAa,MACbC,SAAU,SAACZ,GAAD,OAAOF,EAAUE,EAAEa,OAAOV,QAFtC,UAIE,wBAAQA,MAAM,MAAd,wDACA,wBAAQA,MAAM,UAAd,wDACA,wBAAQA,MAAM,YAAd,wDACA,wBAAQA,MAAM,UAAd,iEAGU,YAAXN,EACC,wBACEiB,QAAS,kBAvBK,WACpB,IAAMZ,EAAUP,EAAME,QAAO,SAACa,GAC5B,OAAQA,EAAKF,WAGfZ,EAASM,GAkBYa,IACfC,SAA0D,IAAhDrB,EAAME,QAAO,SAACa,GAAD,OAAUA,EAAKF,WAASS,OAFjD,8DAOA,uBAAMC,SAAU,SAAClB,GAAD,OAAOD,EAAeC,IAAtC,UACE,uBACEmB,KAAK,OACLhB,MAAOV,EACPmB,SAAU,SAACZ,GAAD,OAAON,EAAQM,EAAEa,OAAOV,UAEpC,uBACEgB,KAAK,SACLhB,MAAO,eACPe,SAAU,SAAClB,GAAD,OAAOD,EAAeC,SAKtC,6BACGS,EAAcW,KAAI,SAACV,GAClB,OACE,+BACE,uBACEM,SAAUN,EAAKF,QACfW,KAAK,WACLZ,QAASG,EAAKH,QACdK,SAAU,kBAtFF,SAACR,EAAYG,GACjC,IAAML,EAAUP,EAAMyB,KAAI,SAACV,GAIzB,OAHIA,EAAKN,KAAOA,IACdM,EAAKH,SAAWA,GAEXG,KAETd,EAASM,GA+EmBmB,CAAcX,EAAKN,GAAIM,EAAKH,YAE9C,uBACES,SAAUN,EAAKH,SAAWG,EAAKF,QAC/BW,KAAK,OACLhB,MAAOO,EAAKP,MACZS,SAAU,SAACZ,GAAD,OAxGH,SAACI,EAAYD,GAChC,IAAMD,EAAUP,EAAMyB,KAAI,SAACV,GAKzB,OAJIA,EAAKN,KAAOA,IAEdM,EAAKP,MAAQA,GAERO,KAETd,EAASM,GAgGoBoB,CAAaZ,EAAKN,GAAIJ,EAAEa,OAAOV,UAElD,wBAAQW,QAAS,kBApFL,SAACV,EAAYI,GACnC,IAAMN,EAAUP,EAAMyB,KAAI,SAACV,GAIzB,OAHIA,EAAKN,KAAOA,IACdM,EAAKF,SAAWA,GAEXE,KAETd,EAASM,GA6EwBqB,CAAgBb,EAAKN,GAAIM,EAAKF,UAArD,SACGE,EAAKF,QAAU,eAAO,mBAdlBE,EAAKN,aAwB1BoB,IAASC,OAAO,cAAClC,EAAD,IAASmC,SAASC,eAAe,W","file":"static/js/main.36a1a59f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\ninterface Todo {\n  value: string;\n  id: number;\n  checked: boolean;\n  removed: boolean;\n}\n\ntype Filter = \"all\" | \"checked\" | \"unchecked\" | \"removed\";\n\nconst App: React.VFC = () => {\n  const [text, setText] = useState(\"\"); //入力文字を保存\n  const [todos, setTodos] = useState<Todo[]>([]);\n  //todoたちの配列　[{id:new Date,value:入力文},{id:new Date,value:入力文}]\n  const [filter, setFilter] = useState<Filter>(\"all\");\n\n  const handleOnSubmit = (\n    e: React.FormEvent<HTMLFormElement | HTMLInputElement>\n  ) => {\n    e.preventDefault();\n\n    if (!text) {\n      return;\n    }\n\n    const newTodo: Todo = {\n      //todoを作成　{value: 入力文字}\n      value: text,\n      id: new Date().getTime(),\n      checked: false,\n      removed: false,\n    };\n\n    setTodos([newTodo, ...todos]); //配列のオブジェクトでTodosを更新！\n    setText(\"\"); //入力文字をクリア！\n  };\n\n  const handleOnEdit = (id: number, value: string) => {\n    const newTodo = todos.map((todo) => {\n      if (todo.id === id) {\n        //もしtodoのidと入力したidが一緒なら\n        todo.value = value; //引数のvalue(入力変更分)に書き換える\n      }\n      return todo;\n    });\n    setTodos(newTodo);\n    //変更したtodoを含む新Todos(コピー)で、旧Todosを更新する\n  };\n\n  const handleOnCheck = (id: number, checked: boolean) => {\n    const newTodo = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.checked = !checked;\n      }\n      return todo;\n    });\n    setTodos(newTodo);\n  };\n\n  const handleOnremoved = (id: number, removed: boolean) => {\n    const newTodo = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.removed = !removed;\n      }\n      return todo;\n    });\n    setTodos(newTodo);\n  };\n\n  const filteredTodos = todos.filter((todo) => {\n    switch (filter) {\n      case \"all\":\n        return !todo.removed; //条件：削除以外のtodoを返す\n      case \"checked\":\n        return todo.checked && !todo.removed; //条件：チェック済みで、削除以外のtodoを返す\n      case \"unchecked\":\n        return !todo.checked && !todo.removed; //条件：未チェックで、削除以外のtodoを返す\n      case \"removed\":\n        return todo.removed; //条件：削除済みのtodoを返す\n      default:\n        return todo;\n    }\n  });\n\n  const handleOnEmpty = () => {\n    const newTodo = todos.filter((todo) => {\n      return !todo.removed;\n    });\n\n    setTodos(newTodo);\n  };\n\n  //描画エリア\n  return (\n    <div>\n      <select\n        defaultValue=\"all\"\n        onChange={(e) => setFilter(e.target.value as Filter)}\n      >\n        <option value=\"all\">すべてのタスク</option>\n        <option value=\"checked\">完了したタスク</option>\n        <option value=\"unchecked\">未完了のタスク</option>\n        <option value=\"removed\">削除済みのタスク</option>\n      </select>\n\n      {filter === \"removed\" ? (\n        <button\n          onClick={() => handleOnEmpty()}\n          disabled={todos.filter((todo) => todo.removed).length === 0}\n        >\n          ゴミ箱を空にする\n        </button>\n      ) : (\n        <form onSubmit={(e) => handleOnSubmit(e)}>\n          <input\n            type=\"text\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n          />\n          <input\n            type=\"submit\"\n            value={\"追加\"}\n            onSubmit={(e) => handleOnSubmit(e)}\n          />\n        </form>\n      )}\n\n      <ul>\n        {filteredTodos.map((todo) => {\n          return (\n            <li key={todo.id}>\n              <input\n                disabled={todo.removed}\n                type=\"checkbox\"\n                checked={todo.checked}\n                onChange={() => handleOnCheck(todo.id, todo.checked)}\n              />\n              <input\n                disabled={todo.checked || todo.removed}\n                type=\"text\"\n                value={todo.value}\n                onChange={(e) => handleOnEdit(todo.id, e.target.value)}\n              />\n              <button onClick={() => handleOnremoved(todo.id, todo.removed)}>\n                {todo.removed ? \"復元\" : \"削除\"}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}